openapi: 3.0.0
info:
  title: "Muse Dinners API"
  version: "1.0.0"
servers:
  - url: "https://0a48bbb8-2701-441c-a045-c33fbbbe54db-00-2nojjnw9ums1r.janeway.replit.dev/api/v1"
security:
  - ApiKeyAuth: []
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  schemas:
    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
    UserUpsertRequest:
      type: object
      required:
        - telegram_id
        - username
        - display_name
      properties:
        telegram_id:
          type: string
        username:
          type: string
        display_name:
          type: string
    UserUpsertResponse:
      type: object
      properties:
        telegram_id:
          type: string
    Cycle:
      type: object
      properties:
        cycle_id:
          type: integer
        cycle_date:
          type: string
          format: date
        scheduled_at:
          type: string
          format: date-time
        status:
          type: string
          enum: [SCHEDULED, RUNNING, COMPLETE]
    QueuesResponse:
      type: object
      properties:
        ONE_ON_ONE:
          type: array
          items:
            $ref: '#/components/schemas/UserBrief'
        SMALL:
          type: array
          items:
            $ref: '#/components/schemas/UserBrief'
        LARGE:
          type: array
          items:
            $ref: '#/components/schemas/UserBrief'
    UserBrief:
      type: object
      properties:
        telegram_id:
          type: string
        username:
          type: string
        display_name: # Added as per actual response in routes/public.py get_queues
          type: string
        joined_at: # Added as per actual response in routes/public.py get_queues
          type: string
          format: date-time
    QueueJoinRequest:
      type: object
      required:
        - telegram_id
        - group_pref
      properties:
        telegram_id:
          type: string
        group_pref:
          type: string
          enum: [ONE_ON_ONE, SMALL, LARGE]
    QueueLeaveRequest:
      type: object
      required:
        - telegram_id
      properties:
        telegram_id:
          type: string
    MatchMember:
      type: object
      properties:
        telegram_id:
          type: string
        username:
          type: string
        display_name:
          type: string
    MatchCurrentResponse:
      type: object
      properties:
        status:
          type: string
          enum: [PENDING, MATCHED]
        group:
          type: array
          items:
            $ref: '#/components/schemas/MatchMember'
    HistoryEntry:
      type: object
      properties:
        cycle_date:
          type: string
          format: date
        group_type:
          type: string
          enum: [ONE_ON_ONE, SMALL, LARGE]
        members:
          type: array
          items:
            $ref: '#/components/schemas/MatchMember'
    ConfigResponse:
      type: object
      properties:
        timezone:
          type: string
        matching_time:
          type: string
          description: "HH:MM format"
    ConfigUpdateRequest:
      type: object
      properties:
        timezone:
          type: string
        matching_time:
          type: string
          description: "HH:MM format"
    CycleListEntry:
      type: object
      properties:
        cycle_id:
          type: integer
        cycle_date:
          type: string
          format: date
        status:
          type: string
          enum: [SCHEDULED, RUNNING, COMPLETE]
paths:
  /users:
    post:
      summary: "Upsert user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpsertRequest'
      responses:
        '200':
          description: "User created or updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserUpsertResponse'
  /cycle/current:
    get:
      summary: "Get current matching cycle"
      responses:
        '200':
          description: "Current cycle metadata"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cycle'
  /queues:
    get:
      summary: "Get live queues"
      responses:
        '200':
          description: "Queues by type"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QueuesResponse'
  /queues/join:
    post:
      summary: "Join a queue"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueueJoinRequest'
      responses:
        '200':
          description: "Joined successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
  /queues/leave:
    post:
      summary: "Leave a queue"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueueLeaveRequest'
      responses:
        '200':
          description: "Left queue successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
  /match/current:
    get:
      summary: "Get tonight's match for user"
      parameters:
        - in: query
          name: telegram_id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: "Current match status"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchCurrentResponse'
  /matches/history:
    get:
      summary: "Get global match history"
      parameters:
        - in: query
          name: page
          schema:
            type: integer
        - in: query
          name: per_page
          schema:
            type: integer
      responses:
        '200':
          description: "Paginated history"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HistoryEntry'
  /admin/config:
    get:
      summary: "Get admin config"
      responses:
        '200':
          description: "Config values"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
    put:
      summary: "Update admin config"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigUpdateRequest'
      responses:
        '200':
          description: "Config updated"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
  /admin/match/run:
    post:
      summary: "Force matching for current cycle"
      responses:
        '200':
          description: "Matching triggered"
          content:
            application/json:
              schema:
                type: object
                properties:
                  cycle_id:
                    type: integer
  /admin/cycles:
    get:
      summary: "List past cycles"
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
      responses:
        '200':
          description: "List of cycles"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CycleListEntry'
  /admin/reset-db:
    post:
      summary: "Reset the database (DANGER)"
      description: "Deletes all data, re-creates tables, and re-initializes configuration by calling the function from reset_db.py. Use with extreme caution."
      responses:
        '200':
          description: "Database reset successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Database reset successfully. Application state may need to be re-evaluated (e.g., restart app if issues arise)."
        '500':
          description: "Failed to reset database"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Failed to reset database."
                  details:
                    type: string
